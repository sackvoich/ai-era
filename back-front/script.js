const API_CONFIG = {
    baseURL: 'http://127.0.0.1:8000',
    endpoints: {
        predict: '/predict',
        health: '/health'
    },
};

// --- –≠–ª–µ–º–µ–Ω—Ç—ã DOM ---
const textInput = document.getElementById('textInput');
const checkBtn = document.getElementById('checkBtn');
const resultDiv = document.getElementById('result');
const modelInfoDiv = document.querySelector('.model-info');

// –≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤
const textModeBtn = document.getElementById('textModeBtn');
const fileModeBtn = document.getElementById('fileModeBtn');
const textInputPanel = document.getElementById('textInputPanel');
const fileInputPanel = document.getElementById('fileInputPanel');

// –≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
const fileInput = document.getElementById('fileInput');
const fileSelectBtn = document.getElementById('fileSelectBtn');
const fileStatus = document.getElementById('fileStatus');
const fileUploadArea = document.querySelector('.file-upload-area');


// --- –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤ ---
function switchMode(mode) {
    if (mode === 'text') {
        textModeBtn.classList.add('active');
        fileModeBtn.classList.remove('active');
        textInputPanel.style.display = 'block';
        fileInputPanel.style.display = 'none';
    } else if (mode === 'file') {
        fileModeBtn.classList.add('active');
        textModeBtn.classList.remove('active');
        fileInputPanel.style.display = 'block';
        textInputPanel.style.display = 'none';
    }
}

textModeBtn.addEventListener('click', () => switchMode('text'));
fileModeBtn.addEventListener('click', () => switchMode('file'));


// --- –õ–æ–≥–∏–∫–∞ API ---
async function checkTextForProfanity(text) {
    try {
        const response = await fetch(`${API_CONFIG.baseURL}${API_CONFIG.endpoints.predict}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ text })
        });
        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
        const data = await response.json();
        return {
            hasProfanity: data.label === 1,
            probability: Math.round(data.score * 100),
        };
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ API:', error);
        return { isError: true, message: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–æ–¥–µ–ª—å—é' };
    }
}

// --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ---
function displayResult(result) {
    if (result.isError) {
        resultDiv.innerHTML = `<div class="result-content" style="color: #dc3545;">${result.message}</div>`;
        return;
    }

    const status = result.hasProfanity ? 'üö´ –û–ë–ù–ê–†–£–ñ–ï–ù –ú–ê–¢ (1)' : '‚úÖ –ß–ò–°–¢–´–ô –¢–ï–ö–°–¢ (0)';
    const statusClass = result.hasProfanity ? 'status-profanity' : 'status-clean';
    
    resultDiv.innerHTML = `
        <div class="result-content">
            <div class="result-status ${statusClass}">${status}</div>
            <div class="result-probability">–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: ${result.probability}%</div>
        </div>
    `;
}

// --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ ---
async function handleCheck() {
    const text = textInput.value.trim();
    if (!text) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.');
        return;
    }
    if (text.length > 4000) {
        alert('–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤).');
        return;
    }
    
    resultDiv.innerHTML = '<div class="result-content">üîç –ú–æ–¥–µ–ª—å –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç...</div>';
    checkBtn.disabled = true;
    
    try {
        const result = await checkTextForProfanity(text);
        displayResult(result);
    } finally {
        checkBtn.disabled = false;
    }
}

checkBtn.addEventListener('click', handleCheck);
textInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter' && (e.ctrlKey || e.metaKey)) {
        handleCheck();
    }
});


// --- –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ ---
fileSelectBtn.addEventListener('click', () => fileInput.click());
fileInput.addEventListener('change', (e) => {
    const file = e.target.files[0];
    if (file) handleFile(file);
});

async function handleFile(file) {
    if (!file || !file.type.startsWith('text/')) {
        fileStatus.textContent = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª (.txt)';
        return;
    }

    fileStatus.textContent = `–ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: ${file.name}...`;
    try {
        const text = await readFile(file);
        textInput.value = text;
        fileStatus.innerHTML = `<span class="file-success">${file.name} ‚úÖ –∑–∞–≥—Ä—É–∂–µ–Ω</span>`;
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        switchMode('text');
        setTimeout(handleCheck, 300);

    } catch (error) {
        fileStatus.innerHTML = `<span class="file-error">–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞</span>`;
        console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', error);
    }
}

function readFile(file) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = (e) => resolve(e.target.result);
        reader.onerror = reject;
        reader.readAsText(file, 'UTF-8');
    });
}

// Drag & Drop
['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
    fileUploadArea.addEventListener(eventName, e => {
        e.preventDefault();
        e.stopPropagation();
    }, false);
});

['dragenter', 'dragover'].forEach(eventName => {
    fileUploadArea.addEventListener(eventName, () => fileUploadArea.classList.add('drag-over'), false);
});

['dragleave', 'drop'].forEach(eventName => {
    fileUploadArea.addEventListener(eventName, () => fileUploadArea.classList.remove('drag-over'), false);
});

fileUploadArea.addEventListener('drop', e => {
    const file = e.dataTransfer.files[0];
    if (file) handleFile(file);
}, false);


// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API ---
async function checkAPIStatus() {
    try {
        const response = await fetch(`${API_CONFIG.baseURL}${API_CONFIG.endpoints.health}`);
        if (!response.ok) throw new Error('API not responding');
        const data = await response.json();
        console.log('API status:', data);
    } catch (error) {
        console.error('API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error);
        resultDiv.innerHTML = '<div class="result-content" style="color: #dc3545;">‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É —Å –º–æ–¥–µ–ª—å—é.</div>';
    }
}

document.addEventListener('DOMContentLoaded', () => {
    switchMode('text'); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
    checkAPIStatus();
});